/** Model object for openlibrary, based on https://github.com/internetarchive/openlibrary/blob/master/conf/solr/conf/schema.xml
This one has been generated by hand, it would be better to use code generation, but I only have so much time. 

In anticipation of this, the class is named "BookBase" , eventually the code generation would used 
the generation gap pattern., where mose of this code sould be generated, so Book would would extend
BookBase.
*/
export interface BookBaseProps {
key: string;
	type: string;
	redirects: string;
	has_fulltext: boolean;
	title: string;
	title_suggest: string;
	subtitle: string;
	alternative_title: string;
	alternative_subtitle: string;
	edition_count: number;
	edition_key: string;
	cover_edition_key: string;
	by_statement: string;
	publish_date: string;
	publish_year: string;
	first_publish_year: number;
	first_edition: string;
	first_publisher: string;
	language: string;
	number_of_pages: number;
}
class BookBase implements BookBaseProps {

	key: string;
	type: string;
	redirects: string;
	has_fulltext: boolean;
	title: string;
	title_suggest: string;
	subtitle: string;
	alternative_title: string;
	alternative_subtitle: string;
	edition_count: number;
	edition_key: string;
	cover_edition_key: string;
	by_statement: string;
	publish_date: string;
	publish_year: string;
	first_publish_year: number;
	first_edition: string;
	first_publisher: string;
	language: string;
	number_of_pages: number;
	
	/**accessors, which should demonstrate the utility of code generation*/
	get key() { return this.key;}
	set key(value) { this.key=value;}
	get type() { return this.type;}
	set type(value) { this.type = value;}
	get redirects() { return this.redirects;}
	set redirects(value) { this.redirects=value;}
	constructor( props: BookBaseProps = {})
	{
		this.readFromApiResult();
	}
	/** Easy override point for head patch before getting data from API*/
	prepBeforeAPIRead() 
	{
		// this method exists as an easy override point for a head patch
	}
	/** Easy override point for tall patch after getting data from API*/
	fixupAfterAPIRead()
	{
	// similar to prepBeforeApiRead, but a tail patch
	}
	
	/** initialize a BookBase from an API-style Json blob*/
	readFromApiResult(result: BookBaseProps) {
		this.prepBeforeFPIRead();
		for(let k in result){this[k] = result[k] }
		this.fixupAfterApiRead();
	}
	
	/** return the magic URL for a cover image, per docs here: https://openlibrary.org/dev/docs/api/covers
	*/
	get coverImageURL() {
	
		return "http://covers.openlibrary.org/b/ID/"+this.key+"-M.jpg";
	}
}




export default BookBase;